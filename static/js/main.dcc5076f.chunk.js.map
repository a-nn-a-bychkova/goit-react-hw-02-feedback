{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Statistics/Statistics.js","components/App.js","reportWebVitals.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","map","option","type","className","onClick","Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","App","state","updateStatistics","setState","prevState","countTotalFeedback","Object","values","reduce","acc","countPositiveFeedbackPercentage","console","log","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAqBeA,G,MAnBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,8BACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,wBACEC,KAAK,SACLC,UAAU,SAEVC,QAAS,WACPL,EAAgBE,IALpB,SAQG,CAACA,IALG,CAACA,WCEDI,EATC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,0BAASJ,UAAU,UAAnB,UACGG,EACAC,MCkBQC,EAtBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qBAAIV,UAAU,OAAd,UACE,qBAAIA,UAAU,OAAd,kBAA2BM,KAC3B,qBAAIN,UAAU,OAAd,qBAA8BO,KAC9B,qBAAIP,UAAU,OAAd,iBAA0BQ,KAC1B,qBAAIR,UAAU,OAAd,mBAEG,WACCS,QAGJ,qBAAIT,UAAU,OAAd,sBAEG,WACCU,EAAmBJ,EAAMG,WCqCpBE,E,4MA/CbC,MAAQ,CACNN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPK,iBAAmB,SAAAf,GACjB,EAAKgB,UAAS,SAAAC,GAAS,sBACpBjB,EAASiB,EAAUjB,GAAU,O,EAIlCkB,mBAAqB,WACnBC,OAAOC,OAAO,EAAKN,OAAOO,QAAO,SAACC,EAAKtB,GAAN,OAAiBsB,EAAMtB,IAAQ,I,EAGlEuB,gCAAkC,WAChCC,QAAQC,IAAI,2C,uDAGJ,IAAD,EACwBC,KAAKZ,MAA5BN,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IAETgB,KAAKR,qBAEnB,OACE,gCACE,cAAC,EAAD,CAASb,MAAM,6BAAf,SACE,cAAC,EAAD,CACER,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAAiB4B,KAAKX,qBAG1B,cAAC,EAAD,CAASV,MAAM,aAAf,SACE,cAAC,EAAD,CACEG,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOe,KAAKR,mBAAmBQ,KAAKZ,OACpCF,mBAAoBc,KAAKH,2C,GAxCnBI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dcc5076f.chunk.js","sourcesContent":["import React from 'react';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <div>\n      {options.map(option => (\n        <button\n          type=\"button\"\n          className=\"button\"\n          key={[option]}\n          onClick={() => {\n            onLeaveFeedback(option);\n          }}\n        >\n          {[option]}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section className=\"Section\">\n      {title}\n      {children}\n    </section>\n  );\n};\n\nexport default Section;\n","import React from 'react';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <ul className=\"list\">\n      <li className=\"item\">Good:{good}</li>\n      <li className=\"item\">Neutral:{neutral}</li>\n      <li className=\"item\">Bad:{bad}</li>\n      <li className=\"item\">\n        Total:\n        {() => {\n          total();\n        }}\n      </li>\n      <li className=\"item\">\n        Positive:\n        {() => {\n          positivePercentage(good, total);\n        }}\n      </li>\n    </ul>\n  );\n};\n\nexport default Statistics;\n","import React, { Component } from 'react';\nimport shortid from 'shortid';\nimport FeedbackOptions from './FeedbackOptions';\nimport Section from './Section';\nimport Statistics from './Statistics';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  updateStatistics = option => {\n    this.setState(prevState => ({\n      [option]: prevState[option] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    Object.values(this.state).reduce((acc, option) => acc + option, 0);\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    console.log('also we will count positive percentage');\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    const total = this.countTotalFeedback();\n\n    return (\n      <div>\n        <Section title=\"Please leave your feedback\">\n          <FeedbackOptions\n            options={['good', 'neutral', 'bad']}\n            onLeaveFeedback={this.updateStatistics}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={this.countTotalFeedback(this.state)}\n            positivePercentage={this.countPositiveFeedbackPercentage}\n          />\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}